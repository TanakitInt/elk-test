input
{
    file
    {
        path => "C:/ELK/event_log/apache_*.log"
        start_position => "beginning"
        
    }

    file
    {
        path => "C:/ELK/event_log/java_errors.log"
        start_position => "beginning"

        codec => multiline
        {
            pattern => "^(\s+|\t)|(Caused by:)"     #starting with spacebar or tab or "Caused by:"
			what => "previous"
			auto_flush_interval => 5
        }
    }
} 

filter 
{
    if [headers][request_path] =~ "error" or [path] =~ "errors"
    {
        mutate
        {
            replace => { type => "error" }
        }
    }
    else
    {
        mutate
        {
            replace => { type => "access"}
        }

        grok 
        {
            match => { "message" => '%{HTTPD_COMMONLOG} "%{GREEDYDATA:referrer}" "%{GREEDYDATA:agent}"' }
	    }

        if "_grokparsefailure" in [tags]
        {
            drop { }
        }

        useragent
        {
            source => "agent"
            target => "ua"
        }

        #Admin Page
        #/admin/
        if [request] =~ /^\/admin\//
        {
            drop { }
        }

        #Static Files
        if [ request ] =~ /^\/js\//
            or [ request ] =~ /^\/css\//
            or [ request ] in [ "/robots.txt", "/favicon.ico" ]
        {
            drop { }
        }

        #Crawlers
        if [ua][device] == "Spider"
        {
            drop { }
        }

        mutate 
        {
            convert => 
            {
            	"response" => "integer"
            	"bytes" => "integer"
            }
	    }

        date
        {
            match => [ "timestamp", "dd/MMM/yyyy:HH:mm:ss Z" ]
            remove_field => [ "timestamp" ]
        }

		# geoip
        # {
		# 	source => "clientip"
        #     ecs_compatibility => disabled
		# }
    }

    mutate
    {
        remove_field => [ "headers", "@version", "host" ]
    }
}


output
{
    if [type] == "access"
    {
        elasticsearch
        {
            hosts => [ "localhost:9200" ]
            #index => "%{type}-%{+YYYY.MM.dd}"
            document_type => "default"
            http_compression => true
        }
    }
    else
    {
        stdout
        {
            codec => rubydebug
        }
    }
}

